buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

// Common Setting of All Projects
subprojects {

    apply plugin: 'java'

    version = '0.0.1'

    def defaultEncoding = "UTF-8"
    [compileJava, compileTestJava]*.options*.encoding = defaultEncoding

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        compile('org.projectlombok:lombok:1.16.6')
    }
}

// Web Layer
project(':hello-wts-web') {

    apply plugin: 'spring-boot' 

    dependencies {
        compile project(':hello-wts-domain')
        compile project(':hello-wts-persistence')
        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
        compile('org.springframework.boot:spring-boot-starter-web')
        testCompile('org.springframework.boot:spring-boot-starter-test') 
    }

    jar {
        baseName = 'HelloWorldTS'
        version = '0.0.1-SNAPSHOT'
    }
}

// Batch Layer
project(':hello-wts-batch') {

    apply plugin: 'spring-boot' 

    dependencies {
        compile project(':hello-wts-domain')
        compile project(':hello-wts-persistence')
        compile('org.springframework.boot:spring-boot-starter-batch')
        testCompile('org.springframework.boot:spring-boot-starter-test') 
    }
}

// Domain Layer
project(':hello-wts-domain') {

    apply plugin: 'spring-boot' 

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-aop')
        compile('org.springframework:spring-tx')
    }
}

// Persistence Layer
project(':hello-wts-persistence') {

    apply plugin: 'spring-boot' 

    dependencies {
        compile project(':hello-wts-domain')
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        runtime('com.h2database:h2')
    }
}

// Work Project
project(':hello-wts-work') {

}
